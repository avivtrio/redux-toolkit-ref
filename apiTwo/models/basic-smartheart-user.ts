/* tslint:disable */
/* eslint-disable */
/**
 * Smartheart Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Organization } from './organization';

/**
 * 
 * @export
 * @interface BasicSmartheartUser
 */
export interface BasicSmartheartUser {
    /**
     * Indicates whether the user can add new profiles
     * @type {boolean}
     * @memberof BasicSmartheartUser
     */
    canAddProfiles?: boolean;
    /**
     * Indicates whether the user can delete existing profiles
     * @type {boolean}
     * @memberof BasicSmartheartUser
     */
    canDeleteProfiles?: boolean;
    /**
     * Indicates whether the Smartheart Preview is enabled for the user
     * @type {boolean}
     * @memberof BasicSmartheartUser
     */
    smartheartPreviewEnabled?: boolean;
    /**
     * Indicates whether the user is a professional user or not
     * @type {boolean}
     * @memberof BasicSmartheartUser
     */
    isProfessionalUser?: boolean;
    /**
     * The maximum number of profiles the user can add. Infinite if null.
     * @type {number}
     * @memberof BasicSmartheartUser
     */
    maxProfiles?: number;
    /**
     * Indicates whether the QtcF values should be displayed. Else, the QtcB value should be displayed.
     * @type {boolean}
     * @memberof BasicSmartheartUser
     */
    useQtcF?: boolean;
    /**
     * Indicates whether to show the automatic measurements of an ECG to the user or not.
     * @type {boolean}
     * @memberof BasicSmartheartUser
     */
    showAutoMeasurements?: boolean;
    /**
     * Indicates whether the user can create users or not.
     * @type {boolean}
     * @memberof BasicSmartheartUser
     */
    canCreateUsers?: boolean;
    /**
     * 
     * @type {Organization}
     * @memberof BasicSmartheartUser
     */
    organization?: Organization;
    /**
     * Indicates whether the user is an organization admin user.
     * @type {boolean}
     * @memberof BasicSmartheartUser
     */
    isOrganizationAdmin?: boolean;
    /**
     * Indicates whether the user can create admin users.
     * @type {boolean}
     * @memberof BasicSmartheartUser
     */
    canCreateAdminUsers?: boolean;
    /**
     * Indicates whether the user can create professional users
     * @type {boolean}
     * @memberof BasicSmartheartUser
     */
    canCreateProfessionalUsers?: boolean;
    /**
     * The unique identifier of the user
     * @type {string}
     * @memberof BasicSmartheartUser
     */
    id?: string;
    /**
     * The first name of the user
     * @type {string}
     * @memberof BasicSmartheartUser
     */
    firstName?: string;
    /**
     * The last name of the user
     * @type {string}
     * @memberof BasicSmartheartUser
     */
    lastName?: string;
    /**
     * The salutation of the user
     * @type {string}
     * @memberof BasicSmartheartUser
     */
    salutation?: string;
    /**
     * The user name (email) of the user
     * @type {string}
     * @memberof BasicSmartheartUser
     */
    userName?: string;
    /**
     * The password of the user
     * @type {string}
     * @memberof BasicSmartheartUser
     */
    password?: string;
    /**
     * Indicates whether the user has ECG interpretation service or not
     * @type {boolean}
     * @memberof BasicSmartheartUser
     */
    withService?: boolean;
    /**
     * Indicates whether the user is enabled or not.  When creating an organization user, if set to false the created user is disabled and the proper   activation process will be initialized.
     * @type {boolean}
     * @memberof BasicSmartheartUser
     */
    enabled?: boolean;
}


