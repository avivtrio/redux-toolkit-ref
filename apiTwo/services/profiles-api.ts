/* tslint:disable */
/* eslint-disable */
/**
 * Smartheart Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EcgComment } from '../models';
// @ts-ignore
import { EcgPortalInterpretation } from '../models';
// @ts-ignore
import { Profile } from '../models';
// @ts-ignore
import { SendEcgRequest } from '../models';
// @ts-ignore
import { ShApiResponseBoolean } from '../models';
// @ts-ignore
import { ShApiResponseByte } from '../models';
// @ts-ignore
import { ShApiResponseCreateProfilesResponse } from '../models';
// @ts-ignore
import { ShApiResponseEcgData } from '../models';
// @ts-ignore
import { ShApiResponseEcgMetaData } from '../models';
// @ts-ignore
import { ShApiResponseListProfile } from '../models';
// @ts-ignore
import { ShApiResponseListProfileEcg } from '../models';
// @ts-ignore
import { ShApiResponseProfile } from '../models';
// @ts-ignore
import { ShApiResponseString } from '../models';
/**
 * ProfilesApi - axios parameter creator
 * @export
 */
export const ProfilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a comment to the given ecg
         * @param {string} profileGuid The unique identifier of the profile that the ECG was done for
         * @param {string} ecgId The unique id of the ECG to add the interpretation to
         * @param {EcgComment} comment The comment data
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesAddPortalComment: async (profileGuid: string, ecgId: string, comment: EcgComment, authorization?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileGuid' is not null or undefined
            assertParamExists('profilesAddPortalComment', 'profileGuid', profileGuid)
            // verify required parameter 'ecgId' is not null or undefined
            assertParamExists('profilesAddPortalComment', 'ecgId', ecgId)
            // verify required parameter 'comment' is not null or undefined
            assertParamExists('profilesAddPortalComment', 'comment', comment)
            const localVarPath = `/profiles/{profileGuid}/ecgs/{ecgId}/comment`
                .replace(`{${"profileGuid"}}`, encodeURIComponent(String(profileGuid)))
                .replace(`{${"ecgId"}}`, encodeURIComponent(String(ecgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(comment, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add an interpretation text to the given ecg
         * @param {string} profileGuid The unique identifier of the profile that the ECG was done for
         * @param {string} ecgId The unique id of the ECG to add the interpretation to
         * @param {EcgPortalInterpretation} interpretation The interpretation data
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesAddPortalInterpretation: async (profileGuid: string, ecgId: string, interpretation: EcgPortalInterpretation, authorization?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileGuid' is not null or undefined
            assertParamExists('profilesAddPortalInterpretation', 'profileGuid', profileGuid)
            // verify required parameter 'ecgId' is not null or undefined
            assertParamExists('profilesAddPortalInterpretation', 'ecgId', ecgId)
            // verify required parameter 'interpretation' is not null or undefined
            assertParamExists('profilesAddPortalInterpretation', 'interpretation', interpretation)
            const localVarPath = `/profiles/{profileGuid}/ecgs/{ecgId}/interpretation`
                .replace(`{${"profileGuid"}}`, encodeURIComponent(String(profileGuid)))
                .replace(`{${"ecgId"}}`, encodeURIComponent(String(ecgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(interpretation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Adds the given list of profiles to the
         * @param {string} userId The unique identifier of the user to add the profiles to
         * @param {Array<Profile>} profiles The list of profiles to add
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesCreateProfiles: async (userId: string, profiles: Array<Profile>, authorization?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('profilesCreateProfiles', 'userId', userId)
            // verify required parameter 'profiles' is not null or undefined
            assertParamExists('profilesCreateProfiles', 'profiles', profiles)
            const localVarPath = `/users/{userId}/profiles`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(profiles, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes the given profile from the profiles list
         * @param {string} profileGuid The unique identifier of the profile to delete
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesDeleteProfile: async (profileGuid: string, authorization?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileGuid' is not null or undefined
            assertParamExists('profilesDeleteProfile', 'profileGuid', profileGuid)
            const localVarPath = `/profiles/{profileGuid}`
                .replace(`{${"profileGuid"}}`, encodeURIComponent(String(profileGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the profile list of the given user. Available for Api users only.
         * @param {string} userId The unique identifier of the user whose profiles list to return
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesGetCustomerProfiles: async (userId: string, authorization?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('profilesGetCustomerProfiles', 'userId', userId)
            const localVarPath = `/users/{userId}/profiles`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the data of a given ecg
         * @param {string} profileGuid The unique identifier of the profile the ECG was done for
         * @param {string} ecgId The unique identifier of the ECG
         * @param {string} [compareTo] The unique id of the ECG to compare to
         * @param {string} [lang] The culture code (e.g. \&quot;en-US\&quot;) of the returned texts
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesGetEcgData: async (profileGuid: string, ecgId: string, compareTo?: string, lang?: string, authorization?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileGuid' is not null or undefined
            assertParamExists('profilesGetEcgData', 'profileGuid', profileGuid)
            // verify required parameter 'ecgId' is not null or undefined
            assertParamExists('profilesGetEcgData', 'ecgId', ecgId)
            const localVarPath = `/profiles/{profileGuid}/ecgs/{ecgId}`
                .replace(`{${"profileGuid"}}`, encodeURIComponent(String(profileGuid)))
                .replace(`{${"ecgId"}}`, encodeURIComponent(String(ecgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (compareTo !== undefined) {
                localVarQueryParameter['compareTo'] = compareTo;
            }

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the metadata of the the given profile\'s given ECG
         * @param {string} profileGuid The unique identifier of profile
         * @param {string} ecgId The unique identifier of the ECG
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesGetEcgMetaData: async (profileGuid: string, ecgId: string, authorization?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileGuid' is not null or undefined
            assertParamExists('profilesGetEcgMetaData', 'profileGuid', profileGuid)
            // verify required parameter 'ecgId' is not null or undefined
            assertParamExists('profilesGetEcgMetaData', 'ecgId', ecgId)
            const localVarPath = `/profiles/{profileGuid}/ecgs/{ecgId}/metadata`
                .replace(`{${"profileGuid"}}`, encodeURIComponent(String(profileGuid)))
                .replace(`{${"ecgId"}}`, encodeURIComponent(String(ecgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the pdf report of the given profile\'s given ECG
         * @param {string} profileGuid The unique identifier of profile
         * @param {string} ecgId The unique identifier of the ECG
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesGetProfileEcgPdf: async (profileGuid: string, ecgId: string, authorization?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileGuid' is not null or undefined
            assertParamExists('profilesGetProfileEcgPdf', 'profileGuid', profileGuid)
            // verify required parameter 'ecgId' is not null or undefined
            assertParamExists('profilesGetProfileEcgPdf', 'ecgId', ecgId)
            const localVarPath = `/profiles/{profileGuid}/ecgs/{ecgId}/pdf`
                .replace(`{${"profileGuid"}}`, encodeURIComponent(String(profileGuid)))
                .replace(`{${"ecgId"}}`, encodeURIComponent(String(ecgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the xml report of the given profile\'s given ECG
         * @param {string} profileGuid The unique identifier of profile
         * @param {string} ecgId The unique identifier of the ECG
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesGetProfileEcgXml: async (profileGuid: string, ecgId: string, authorization?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileGuid' is not null or undefined
            assertParamExists('profilesGetProfileEcgXml', 'profileGuid', profileGuid)
            // verify required parameter 'ecgId' is not null or undefined
            assertParamExists('profilesGetProfileEcgXml', 'ecgId', ecgId)
            const localVarPath = `/profiles/{profileGuid}/ecgs/{ecgId}/xml`
                .replace(`{${"profileGuid"}}`, encodeURIComponent(String(profileGuid)))
                .replace(`{${"ecgId"}}`, encodeURIComponent(String(ecgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return the list of ECGs of the given profile
         * @param {string} profileGuid The unique identifier of the profile whose ECGs to return
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesGetProfileEcgs: async (profileGuid: string, authorization?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileGuid' is not null or undefined
            assertParamExists('profilesGetProfileEcgs', 'profileGuid', profileGuid)
            const localVarPath = `/profiles/{profileGuid}/ecgs`
                .replace(`{${"profileGuid"}}`, encodeURIComponent(String(profileGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the authenticated user\'s profiles list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesGetProfiles: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/profiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send the given profile\'s ecg to the given email recipients
         * @param {string} profileGuid The unique identifier of profile
         * @param {string} ecgId The unique identifier of the ECG
         * @param {SendEcgRequest} req The email recipient to send the ECG to
         * @param {string} [lang] The language of the email, in .Net Culture Code format (e.g. \&quot;en-US\&quot;)
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesSendProfileEcg: async (profileGuid: string, ecgId: string, req: SendEcgRequest, lang?: string, authorization?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileGuid' is not null or undefined
            assertParamExists('profilesSendProfileEcg', 'profileGuid', profileGuid)
            // verify required parameter 'ecgId' is not null or undefined
            assertParamExists('profilesSendProfileEcg', 'ecgId', ecgId)
            // verify required parameter 'req' is not null or undefined
            assertParamExists('profilesSendProfileEcg', 'req', req)
            const localVarPath = `/profiles/{profileGuid}/ecgs/{ecgId}/send`
                .replace(`{${"profileGuid"}}`, encodeURIComponent(String(profileGuid)))
                .replace(`{${"ecgId"}}`, encodeURIComponent(String(ecgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(req, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Transmits an ECG for the given profile id
         * @param {string} profileGuid The unique identifier of profile
         * @param {string} ecgXml The ECG data in xml format
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesTransmitProfileEcg: async (profileGuid: string, ecgXml: string, authorization?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileGuid' is not null or undefined
            assertParamExists('profilesTransmitProfileEcg', 'profileGuid', profileGuid)
            // verify required parameter 'ecgXml' is not null or undefined
            assertParamExists('profilesTransmitProfileEcg', 'ecgXml', ecgXml)
            const localVarPath = `/profiles/{profileGuid}/ecgs`
                .replace(`{${"profileGuid"}}`, encodeURIComponent(String(profileGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ecgXml, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update the given profile
         * @param {string} profileGuid The unique identifier of the profile
         * @param {Profile} prof The profile data to update
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesUpdateProfile: async (profileGuid: string, prof: Profile, authorization?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileGuid' is not null or undefined
            assertParamExists('profilesUpdateProfile', 'profileGuid', profileGuid)
            // verify required parameter 'prof' is not null or undefined
            assertParamExists('profilesUpdateProfile', 'prof', prof)
            const localVarPath = `/profiles/{profileGuid}`
                .replace(`{${"profileGuid"}}`, encodeURIComponent(String(profileGuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(prof, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfilesApi - functional programming interface
 * @export
 */
export const ProfilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfilesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a comment to the given ecg
         * @param {string} profileGuid The unique identifier of the profile that the ECG was done for
         * @param {string} ecgId The unique id of the ECG to add the interpretation to
         * @param {EcgComment} comment The comment data
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profilesAddPortalComment(profileGuid: string, ecgId: string, comment: EcgComment, authorization?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShApiResponseBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profilesAddPortalComment(profileGuid, ecgId, comment, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add an interpretation text to the given ecg
         * @param {string} profileGuid The unique identifier of the profile that the ECG was done for
         * @param {string} ecgId The unique id of the ECG to add the interpretation to
         * @param {EcgPortalInterpretation} interpretation The interpretation data
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profilesAddPortalInterpretation(profileGuid: string, ecgId: string, interpretation: EcgPortalInterpretation, authorization?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShApiResponseBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profilesAddPortalInterpretation(profileGuid, ecgId, interpretation, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Adds the given list of profiles to the
         * @param {string} userId The unique identifier of the user to add the profiles to
         * @param {Array<Profile>} profiles The list of profiles to add
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profilesCreateProfiles(userId: string, profiles: Array<Profile>, authorization?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShApiResponseCreateProfilesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profilesCreateProfiles(userId, profiles, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes the given profile from the profiles list
         * @param {string} profileGuid The unique identifier of the profile to delete
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profilesDeleteProfile(profileGuid: string, authorization?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShApiResponseBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profilesDeleteProfile(profileGuid, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns the profile list of the given user. Available for Api users only.
         * @param {string} userId The unique identifier of the user whose profiles list to return
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profilesGetCustomerProfiles(userId: string, authorization?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShApiResponseListProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profilesGetCustomerProfiles(userId, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets the data of a given ecg
         * @param {string} profileGuid The unique identifier of the profile the ECG was done for
         * @param {string} ecgId The unique identifier of the ECG
         * @param {string} [compareTo] The unique id of the ECG to compare to
         * @param {string} [lang] The culture code (e.g. \&quot;en-US\&quot;) of the returned texts
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profilesGetEcgData(profileGuid: string, ecgId: string, compareTo?: string, lang?: string, authorization?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShApiResponseEcgData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profilesGetEcgData(profileGuid, ecgId, compareTo, lang, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns the metadata of the the given profile\'s given ECG
         * @param {string} profileGuid The unique identifier of profile
         * @param {string} ecgId The unique identifier of the ECG
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profilesGetEcgMetaData(profileGuid: string, ecgId: string, authorization?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShApiResponseEcgMetaData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profilesGetEcgMetaData(profileGuid, ecgId, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns the pdf report of the given profile\'s given ECG
         * @param {string} profileGuid The unique identifier of profile
         * @param {string} ecgId The unique identifier of the ECG
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profilesGetProfileEcgPdf(profileGuid: string, ecgId: string, authorization?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShApiResponseByte>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profilesGetProfileEcgPdf(profileGuid, ecgId, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns the xml report of the given profile\'s given ECG
         * @param {string} profileGuid The unique identifier of profile
         * @param {string} ecgId The unique identifier of the ECG
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profilesGetProfileEcgXml(profileGuid: string, ecgId: string, authorization?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShApiResponseByte>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profilesGetProfileEcgXml(profileGuid, ecgId, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Return the list of ECGs of the given profile
         * @param {string} profileGuid The unique identifier of the profile whose ECGs to return
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profilesGetProfileEcgs(profileGuid: string, authorization?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShApiResponseListProfileEcg>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profilesGetProfileEcgs(profileGuid, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the authenticated user\'s profiles list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profilesGetProfiles(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShApiResponseListProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profilesGetProfiles(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send the given profile\'s ecg to the given email recipients
         * @param {string} profileGuid The unique identifier of profile
         * @param {string} ecgId The unique identifier of the ECG
         * @param {SendEcgRequest} req The email recipient to send the ECG to
         * @param {string} [lang] The language of the email, in .Net Culture Code format (e.g. \&quot;en-US\&quot;)
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profilesSendProfileEcg(profileGuid: string, ecgId: string, req: SendEcgRequest, lang?: string, authorization?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShApiResponseBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profilesSendProfileEcg(profileGuid, ecgId, req, lang, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Transmits an ECG for the given profile id
         * @param {string} profileGuid The unique identifier of profile
         * @param {string} ecgXml The ECG data in xml format
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profilesTransmitProfileEcg(profileGuid: string, ecgXml: string, authorization?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShApiResponseString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profilesTransmitProfileEcg(profileGuid, ecgXml, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update the given profile
         * @param {string} profileGuid The unique identifier of the profile
         * @param {Profile} prof The profile data to update
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profilesUpdateProfile(profileGuid: string, prof: Profile, authorization?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShApiResponseProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profilesUpdateProfile(profileGuid, prof, authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProfilesApi - factory interface
 * @export
 */
export const ProfilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfilesApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a comment to the given ecg
         * @param {string} profileGuid The unique identifier of the profile that the ECG was done for
         * @param {string} ecgId The unique id of the ECG to add the interpretation to
         * @param {EcgComment} comment The comment data
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesAddPortalComment(profileGuid: string, ecgId: string, comment: EcgComment, authorization?: string, options?: any): AxiosPromise<ShApiResponseBoolean> {
            return localVarFp.profilesAddPortalComment(profileGuid, ecgId, comment, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add an interpretation text to the given ecg
         * @param {string} profileGuid The unique identifier of the profile that the ECG was done for
         * @param {string} ecgId The unique id of the ECG to add the interpretation to
         * @param {EcgPortalInterpretation} interpretation The interpretation data
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesAddPortalInterpretation(profileGuid: string, ecgId: string, interpretation: EcgPortalInterpretation, authorization?: string, options?: any): AxiosPromise<ShApiResponseBoolean> {
            return localVarFp.profilesAddPortalInterpretation(profileGuid, ecgId, interpretation, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Adds the given list of profiles to the
         * @param {string} userId The unique identifier of the user to add the profiles to
         * @param {Array<Profile>} profiles The list of profiles to add
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesCreateProfiles(userId: string, profiles: Array<Profile>, authorization?: string, options?: any): AxiosPromise<ShApiResponseCreateProfilesResponse> {
            return localVarFp.profilesCreateProfiles(userId, profiles, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes the given profile from the profiles list
         * @param {string} profileGuid The unique identifier of the profile to delete
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesDeleteProfile(profileGuid: string, authorization?: string, options?: any): AxiosPromise<ShApiResponseBoolean> {
            return localVarFp.profilesDeleteProfile(profileGuid, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns the profile list of the given user. Available for Api users only.
         * @param {string} userId The unique identifier of the user whose profiles list to return
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesGetCustomerProfiles(userId: string, authorization?: string, options?: any): AxiosPromise<ShApiResponseListProfile> {
            return localVarFp.profilesGetCustomerProfiles(userId, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets the data of a given ecg
         * @param {string} profileGuid The unique identifier of the profile the ECG was done for
         * @param {string} ecgId The unique identifier of the ECG
         * @param {string} [compareTo] The unique id of the ECG to compare to
         * @param {string} [lang] The culture code (e.g. \&quot;en-US\&quot;) of the returned texts
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesGetEcgData(profileGuid: string, ecgId: string, compareTo?: string, lang?: string, authorization?: string, options?: any): AxiosPromise<ShApiResponseEcgData> {
            return localVarFp.profilesGetEcgData(profileGuid, ecgId, compareTo, lang, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns the metadata of the the given profile\'s given ECG
         * @param {string} profileGuid The unique identifier of profile
         * @param {string} ecgId The unique identifier of the ECG
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesGetEcgMetaData(profileGuid: string, ecgId: string, authorization?: string, options?: any): AxiosPromise<ShApiResponseEcgMetaData> {
            return localVarFp.profilesGetEcgMetaData(profileGuid, ecgId, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns the pdf report of the given profile\'s given ECG
         * @param {string} profileGuid The unique identifier of profile
         * @param {string} ecgId The unique identifier of the ECG
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesGetProfileEcgPdf(profileGuid: string, ecgId: string, authorization?: string, options?: any): AxiosPromise<ShApiResponseByte> {
            return localVarFp.profilesGetProfileEcgPdf(profileGuid, ecgId, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns the xml report of the given profile\'s given ECG
         * @param {string} profileGuid The unique identifier of profile
         * @param {string} ecgId The unique identifier of the ECG
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesGetProfileEcgXml(profileGuid: string, ecgId: string, authorization?: string, options?: any): AxiosPromise<ShApiResponseByte> {
            return localVarFp.profilesGetProfileEcgXml(profileGuid, ecgId, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return the list of ECGs of the given profile
         * @param {string} profileGuid The unique identifier of the profile whose ECGs to return
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesGetProfileEcgs(profileGuid: string, authorization?: string, options?: any): AxiosPromise<ShApiResponseListProfileEcg> {
            return localVarFp.profilesGetProfileEcgs(profileGuid, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the authenticated user\'s profiles list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesGetProfiles(options?: any): AxiosPromise<ShApiResponseListProfile> {
            return localVarFp.profilesGetProfiles(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send the given profile\'s ecg to the given email recipients
         * @param {string} profileGuid The unique identifier of profile
         * @param {string} ecgId The unique identifier of the ECG
         * @param {SendEcgRequest} req The email recipient to send the ECG to
         * @param {string} [lang] The language of the email, in .Net Culture Code format (e.g. \&quot;en-US\&quot;)
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesSendProfileEcg(profileGuid: string, ecgId: string, req: SendEcgRequest, lang?: string, authorization?: string, options?: any): AxiosPromise<ShApiResponseBoolean> {
            return localVarFp.profilesSendProfileEcg(profileGuid, ecgId, req, lang, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Transmits an ECG for the given profile id
         * @param {string} profileGuid The unique identifier of profile
         * @param {string} ecgXml The ECG data in xml format
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesTransmitProfileEcg(profileGuid: string, ecgXml: string, authorization?: string, options?: any): AxiosPromise<ShApiResponseString> {
            return localVarFp.profilesTransmitProfileEcg(profileGuid, ecgXml, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update the given profile
         * @param {string} profileGuid The unique identifier of the profile
         * @param {Profile} prof The profile data to update
         * @param {string} [authorization] access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilesUpdateProfile(profileGuid: string, prof: Profile, authorization?: string, options?: any): AxiosPromise<ShApiResponseProfile> {
            return localVarFp.profilesUpdateProfile(profileGuid, prof, authorization, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProfilesApi - interface
 * @export
 * @interface ProfilesApi
 */
export interface ProfilesApiInterface {
    /**
     * 
     * @summary Add a comment to the given ecg
     * @param {string} profileGuid The unique identifier of the profile that the ECG was done for
     * @param {string} ecgId The unique id of the ECG to add the interpretation to
     * @param {EcgComment} comment The comment data
     * @param {string} [authorization] access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApiInterface
     */
    profilesAddPortalComment(profileGuid: string, ecgId: string, comment: EcgComment, authorization?: string, options?: any): AxiosPromise<ShApiResponseBoolean>;

    /**
     * 
     * @summary Add an interpretation text to the given ecg
     * @param {string} profileGuid The unique identifier of the profile that the ECG was done for
     * @param {string} ecgId The unique id of the ECG to add the interpretation to
     * @param {EcgPortalInterpretation} interpretation The interpretation data
     * @param {string} [authorization] access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApiInterface
     */
    profilesAddPortalInterpretation(profileGuid: string, ecgId: string, interpretation: EcgPortalInterpretation, authorization?: string, options?: any): AxiosPromise<ShApiResponseBoolean>;

    /**
     * 
     * @summary Adds the given list of profiles to the
     * @param {string} userId The unique identifier of the user to add the profiles to
     * @param {Array<Profile>} profiles The list of profiles to add
     * @param {string} [authorization] access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApiInterface
     */
    profilesCreateProfiles(userId: string, profiles: Array<Profile>, authorization?: string, options?: any): AxiosPromise<ShApiResponseCreateProfilesResponse>;

    /**
     * 
     * @summary Deletes the given profile from the profiles list
     * @param {string} profileGuid The unique identifier of the profile to delete
     * @param {string} [authorization] access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApiInterface
     */
    profilesDeleteProfile(profileGuid: string, authorization?: string, options?: any): AxiosPromise<ShApiResponseBoolean>;

    /**
     * 
     * @summary Returns the profile list of the given user. Available for Api users only.
     * @param {string} userId The unique identifier of the user whose profiles list to return
     * @param {string} [authorization] access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApiInterface
     */
    profilesGetCustomerProfiles(userId: string, authorization?: string, options?: any): AxiosPromise<ShApiResponseListProfile>;

    /**
     * 
     * @summary Gets the data of a given ecg
     * @param {string} profileGuid The unique identifier of the profile the ECG was done for
     * @param {string} ecgId The unique identifier of the ECG
     * @param {string} [compareTo] The unique id of the ECG to compare to
     * @param {string} [lang] The culture code (e.g. \&quot;en-US\&quot;) of the returned texts
     * @param {string} [authorization] access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApiInterface
     */
    profilesGetEcgData(profileGuid: string, ecgId: string, compareTo?: string, lang?: string, authorization?: string, options?: any): AxiosPromise<ShApiResponseEcgData>;

    /**
     * 
     * @summary Returns the metadata of the the given profile\'s given ECG
     * @param {string} profileGuid The unique identifier of profile
     * @param {string} ecgId The unique identifier of the ECG
     * @param {string} [authorization] access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApiInterface
     */
    profilesGetEcgMetaData(profileGuid: string, ecgId: string, authorization?: string, options?: any): AxiosPromise<ShApiResponseEcgMetaData>;

    /**
     * 
     * @summary Returns the pdf report of the given profile\'s given ECG
     * @param {string} profileGuid The unique identifier of profile
     * @param {string} ecgId The unique identifier of the ECG
     * @param {string} [authorization] access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApiInterface
     */
    profilesGetProfileEcgPdf(profileGuid: string, ecgId: string, authorization?: string, options?: any): AxiosPromise<ShApiResponseByte>;

    /**
     * 
     * @summary Returns the xml report of the given profile\'s given ECG
     * @param {string} profileGuid The unique identifier of profile
     * @param {string} ecgId The unique identifier of the ECG
     * @param {string} [authorization] access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApiInterface
     */
    profilesGetProfileEcgXml(profileGuid: string, ecgId: string, authorization?: string, options?: any): AxiosPromise<ShApiResponseByte>;

    /**
     * 
     * @summary Return the list of ECGs of the given profile
     * @param {string} profileGuid The unique identifier of the profile whose ECGs to return
     * @param {string} [authorization] access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApiInterface
     */
    profilesGetProfileEcgs(profileGuid: string, authorization?: string, options?: any): AxiosPromise<ShApiResponseListProfileEcg>;

    /**
     * 
     * @summary Get the authenticated user\'s profiles list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApiInterface
     */
    profilesGetProfiles(options?: any): AxiosPromise<ShApiResponseListProfile>;

    /**
     * 
     * @summary Send the given profile\'s ecg to the given email recipients
     * @param {string} profileGuid The unique identifier of profile
     * @param {string} ecgId The unique identifier of the ECG
     * @param {SendEcgRequest} req The email recipient to send the ECG to
     * @param {string} [lang] The language of the email, in .Net Culture Code format (e.g. \&quot;en-US\&quot;)
     * @param {string} [authorization] access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApiInterface
     */
    profilesSendProfileEcg(profileGuid: string, ecgId: string, req: SendEcgRequest, lang?: string, authorization?: string, options?: any): AxiosPromise<ShApiResponseBoolean>;

    /**
     * 
     * @summary Transmits an ECG for the given profile id
     * @param {string} profileGuid The unique identifier of profile
     * @param {string} ecgXml The ECG data in xml format
     * @param {string} [authorization] access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApiInterface
     */
    profilesTransmitProfileEcg(profileGuid: string, ecgXml: string, authorization?: string, options?: any): AxiosPromise<ShApiResponseString>;

    /**
     * 
     * @summary Update the given profile
     * @param {string} profileGuid The unique identifier of the profile
     * @param {Profile} prof The profile data to update
     * @param {string} [authorization] access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApiInterface
     */
    profilesUpdateProfile(profileGuid: string, prof: Profile, authorization?: string, options?: any): AxiosPromise<ShApiResponseProfile>;

}

/**
 * ProfilesApi - object-oriented interface
 * @export
 * @class ProfilesApi
 * @extends {BaseAPI}
 */
export class ProfilesApi extends BaseAPI implements ProfilesApiInterface {
    /**
     * 
     * @summary Add a comment to the given ecg
     * @param {string} profileGuid The unique identifier of the profile that the ECG was done for
     * @param {string} ecgId The unique id of the ECG to add the interpretation to
     * @param {EcgComment} comment The comment data
     * @param {string} [authorization] access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public profilesAddPortalComment(profileGuid: string, ecgId: string, comment: EcgComment, authorization?: string, options?: any) {
        return ProfilesApiFp(this.configuration).profilesAddPortalComment(profileGuid, ecgId, comment, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add an interpretation text to the given ecg
     * @param {string} profileGuid The unique identifier of the profile that the ECG was done for
     * @param {string} ecgId The unique id of the ECG to add the interpretation to
     * @param {EcgPortalInterpretation} interpretation The interpretation data
     * @param {string} [authorization] access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public profilesAddPortalInterpretation(profileGuid: string, ecgId: string, interpretation: EcgPortalInterpretation, authorization?: string, options?: any) {
        return ProfilesApiFp(this.configuration).profilesAddPortalInterpretation(profileGuid, ecgId, interpretation, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Adds the given list of profiles to the
     * @param {string} userId The unique identifier of the user to add the profiles to
     * @param {Array<Profile>} profiles The list of profiles to add
     * @param {string} [authorization] access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public profilesCreateProfiles(userId: string, profiles: Array<Profile>, authorization?: string, options?: any) {
        return ProfilesApiFp(this.configuration).profilesCreateProfiles(userId, profiles, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes the given profile from the profiles list
     * @param {string} profileGuid The unique identifier of the profile to delete
     * @param {string} [authorization] access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public profilesDeleteProfile(profileGuid: string, authorization?: string, options?: any) {
        return ProfilesApiFp(this.configuration).profilesDeleteProfile(profileGuid, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns the profile list of the given user. Available for Api users only.
     * @param {string} userId The unique identifier of the user whose profiles list to return
     * @param {string} [authorization] access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public profilesGetCustomerProfiles(userId: string, authorization?: string, options?: any) {
        return ProfilesApiFp(this.configuration).profilesGetCustomerProfiles(userId, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets the data of a given ecg
     * @param {string} profileGuid The unique identifier of the profile the ECG was done for
     * @param {string} ecgId The unique identifier of the ECG
     * @param {string} [compareTo] The unique id of the ECG to compare to
     * @param {string} [lang] The culture code (e.g. \&quot;en-US\&quot;) of the returned texts
     * @param {string} [authorization] access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public profilesGetEcgData(profileGuid: string, ecgId: string, compareTo?: string, lang?: string, authorization?: string, options?: any) {
        return ProfilesApiFp(this.configuration).profilesGetEcgData(profileGuid, ecgId, compareTo, lang, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns the metadata of the the given profile\'s given ECG
     * @param {string} profileGuid The unique identifier of profile
     * @param {string} ecgId The unique identifier of the ECG
     * @param {string} [authorization] access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public profilesGetEcgMetaData(profileGuid: string, ecgId: string, authorization?: string, options?: any) {
        return ProfilesApiFp(this.configuration).profilesGetEcgMetaData(profileGuid, ecgId, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns the pdf report of the given profile\'s given ECG
     * @param {string} profileGuid The unique identifier of profile
     * @param {string} ecgId The unique identifier of the ECG
     * @param {string} [authorization] access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public profilesGetProfileEcgPdf(profileGuid: string, ecgId: string, authorization?: string, options?: any) {
        return ProfilesApiFp(this.configuration).profilesGetProfileEcgPdf(profileGuid, ecgId, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns the xml report of the given profile\'s given ECG
     * @param {string} profileGuid The unique identifier of profile
     * @param {string} ecgId The unique identifier of the ECG
     * @param {string} [authorization] access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public profilesGetProfileEcgXml(profileGuid: string, ecgId: string, authorization?: string, options?: any) {
        return ProfilesApiFp(this.configuration).profilesGetProfileEcgXml(profileGuid, ecgId, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Return the list of ECGs of the given profile
     * @param {string} profileGuid The unique identifier of the profile whose ECGs to return
     * @param {string} [authorization] access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public profilesGetProfileEcgs(profileGuid: string, authorization?: string, options?: any) {
        return ProfilesApiFp(this.configuration).profilesGetProfileEcgs(profileGuid, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the authenticated user\'s profiles list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public profilesGetProfiles(options?: any) {
        return ProfilesApiFp(this.configuration).profilesGetProfiles(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send the given profile\'s ecg to the given email recipients
     * @param {string} profileGuid The unique identifier of profile
     * @param {string} ecgId The unique identifier of the ECG
     * @param {SendEcgRequest} req The email recipient to send the ECG to
     * @param {string} [lang] The language of the email, in .Net Culture Code format (e.g. \&quot;en-US\&quot;)
     * @param {string} [authorization] access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public profilesSendProfileEcg(profileGuid: string, ecgId: string, req: SendEcgRequest, lang?: string, authorization?: string, options?: any) {
        return ProfilesApiFp(this.configuration).profilesSendProfileEcg(profileGuid, ecgId, req, lang, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Transmits an ECG for the given profile id
     * @param {string} profileGuid The unique identifier of profile
     * @param {string} ecgXml The ECG data in xml format
     * @param {string} [authorization] access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public profilesTransmitProfileEcg(profileGuid: string, ecgXml: string, authorization?: string, options?: any) {
        return ProfilesApiFp(this.configuration).profilesTransmitProfileEcg(profileGuid, ecgXml, authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update the given profile
     * @param {string} profileGuid The unique identifier of the profile
     * @param {Profile} prof The profile data to update
     * @param {string} [authorization] access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public profilesUpdateProfile(profileGuid: string, prof: Profile, authorization?: string, options?: any) {
        return ProfilesApiFp(this.configuration).profilesUpdateProfile(profileGuid, prof, authorization, options).then((request) => request(this.axios, this.basePath));
    }
}
